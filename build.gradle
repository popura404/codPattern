buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}


plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    // 让 tacz 的 mixin 生效，使用它自己的 refmap 和 config
    add sourceSets.main, "tacz.refmap.json"
    config "tacz.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven {
        // Add curse maven to repositories
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir { dirs 'libs' }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //compileOnly fg.deobf(files('libs/tacz-1.20.1-1.1.6-hotfix.jar'))
    //runtimeOnly fg.deobf(files('libs/tacz-1.20.1-1.1.6-hotfix.jar'))


    implementation fg.deobf("curse.maven:timeless-and-classics-zero-1028108:6654541-sources-6654543")
    //implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_forge}")
    //implementation fg.deobf("curse.maven:timeless-and-classics-zero-1028108:6632240")

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// 自定义任务：快速构建开发版本
task devBuild {
    description = '快速构建开发版本，跳过测试和检查'
    group = 'build'
    dependsOn 'jar'
}

// 自定义任务：完整的发布构建
task releaseBuild {
    description = '完整的发布构建，包含所有检查和测试'
    group = 'build'
    dependsOn 'build', 'reobfJar'
}

// 自定义任务：快速启动客户端（开发用）
task quickClient {
    description = '快速启动Minecraft客户端（开发模式）'
    group = 'application'
    dependsOn 'prepareRunClient'
    finalizedBy 'runClient'
}

// 自定义任务：快速启动服务器（开发用）
task quickServer {
    description = '快速启动Minecraft服务器（开发模式）'
    group = 'application'
    dependsOn 'prepareRunServer'
    finalizedBy 'runServer'
}

// 自定义任务：清理并重新构建
task rebuild {
    description = '清理并重新构建项目'
    group = 'build'
    dependsOn 'clean', 'build'
    tasks.findByName('build').mustRunAfter tasks.findByName('clean')
}

// 自定义任务：生成开发环境的源码JAR
task sourcesJar(type: Jar) {
    description = '生成源码JAR文件'
    group = 'build'
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

// 自定义任务：检查代码风格和潜在问题
task codeCheck {
    description = '运行代码检查和验证'
    group = 'verification'
    dependsOn 'compileJava', 'processResources'
}

// 自定义任务：生成完整的发布包
task distPackage {
    description = '生成完整的模组发布包'
    group = 'distribution'
    dependsOn 'releaseBuild', 'sourcesJar'

    doLast {
        println "模组构建完成！"
        println "主JAR文件: ${jar.archiveFile.get().asFile}"
        println "源码JAR文件: ${sourcesJar.archiveFile.get().asFile}"
        println "版本: ${mod_version}"
    }
}

// 自定义任务：开发环境设置
task setupDev {
    description = '设置开发环境（生成IDE运行配置等）'
    group = 'ide'
    dependsOn 'genEclipseRuns', 'genIntellijRuns', 'genVSCodeRuns'
}

// 自定义任务：更新依赖
task updateDeps {
    description = '刷新并更新所有依赖'
    group = 'help'

    doLast {
        println "正在刷新依赖..."
    }
}

// 配置artifacts以包含源码JAR
artifacts {
    archives sourcesJar
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar

            pom {
                name = mod_name
                description = mod_description
                url = 'https://github.com/yourname/codpattern' // 请更新为实际的GitHub地址

                licenses {
                    license {
                        name = mod_license
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'popura404'
                        name = mod_authors
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
        // 如果需要发布到远程仓库，可以添加以下配置：
        // maven {
        //     name = "GitHubPackages"
        //     url = "https://maven.pkg.github.com/yourname/codpattern"
        //     credentials {
        //         username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
        //         password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        //     }
        // }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
}

// 优化构建性能
// 启用并行编译
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
    }
}

// 在Windows上优化文件监控
if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs += ['-XX:+UseParallelGC']
    }
}

// Javadoc任务配置
tasks.named('javadoc', Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.author = true
    options.version = true
    options.use = true
    options.addStringOption('Xdoclint:none', '-quiet')

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
